#!/bin/bash
printf 'running test suite at %s\n\n' "$(date)"
start=$(date +"%s")

TESTDIR=$(pwd)/tests
XR0=$(pwd)/bin/0v
LIBX=$(pwd)/libx
IGNORE_FILE=$TESTDIR/wmw-www

ntests=0
npass=0

expected_suffix="EXPECTED"
fail_prefix="FAIL"
topological_folder="topological"
main_func="main"

fail="\e[31mFAIL\e[0m\n"
pass="\e[32mPASS\e[0m\n"
ignore="\e[33mIGNORE\e[0m\n"

nignore=$(cat $IGNORE_FILE | wc -l)
ignore_files=$(cat $IGNORE_FILE)

for f in $ignore_files; do
	file=$TESTDIR/0v/$f
	if [ ! -f "$file" ]; then
		printf "error: ignored file %s not found\n" "$file" 1>&2
		exit
	fi
done

should_ignore() {
    for name in $ignore_files; do
        if [ "$name" = "$1" ]; then
            return 0
        fi
    done
    return 1
}

cd $TESTDIR/0v

ntests=$(ls */*.x | wc -l)

length=$(ls */*.x | awk '{ print length, $0 }' | sort -n -s | cut -d' ' -f2- |
	tail -1 | wc -c)

# loop through and run tests
for f in */*.x
do
	folder=$(dirname "$f")

	printf "%-${length}s ..." "$f"
	tempfile=$(mktemp)

	# skip ignores
	if should_ignore $f; then
		printf "$ignore"
		continue
	fi

	if [ "$folder" == *"$topological_folder"* ]
	then
		if [[ "$f" == *"verification"* ]]
		then
			output=$($XR0 -x main -I $LIBX -v $f > "$tempfile" 2>&1)
		else
			output=$($XR0 -t main -I $LIBX $f > "$tempfile" 2>&1)
		fi
	else 
		output=$($XR0 -I $LIBX $f > "$tempfile" 2>&1)
	fi

	# cases where we have an expected output to compare with
	if [[ "$f" == *"${fail_prefix}"* || "$folder" == *"$topological_folder"* ]]
	then
		expected_file="${f}.${expected_suffix}"
		
		output_file=$(<$tempfile)
		echo "$output_file" | diff - $expected_file
		if diff -q "$tempfile" "$expected_file" >/dev/null;
		then
			npass=$((npass+1))
			printf "$pass"
		else
			printf "$fail"
		fi
	else
		# silence is golden
		if [[ $(cat $tempfile) -eq 0 ]] 
		then
			npass=$((npass+1))
			printf "$pass"
		fi
	fi

	rm $tempfile
done

nfail=$((ntests-(npass+nignore)))
finish=$(date +"%s")
printf '\n%d tests:\t%d passed\t%d failed\t%d ignored\tin %d seconds\n' \
	$ntests $npass $nfail $nignore $((finish-start))
if [ $nfail -ne 0 ]
then
	exit 1
fi
