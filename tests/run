#!/bin/bash
printf 'running test suite at %s\n\n' "$(date)"
start=$(date +"%s.%N")

TESTDIR=$(pwd)/tests
XR0=$(pwd)/bin/0v
LIBX=$(pwd)/libx
IGNORE_FILE=$TESTDIR/wmw-www

ntests=0
npass=0

expected_suffix="EXPECTED"
fail_prefix="FAIL"
topological_folder="topological"
main_func="main"

fail="\e[31mFAIL\e[0m\n"
pass="\e[32mPASS\e[0m\n"
ignore="\e[33mIGNORE\e[0m\n"

run_cmd() {
	f=$1
	folder=$(dirname "$f")
	tempfile=$2

	args=""

	args_file=$folder/args
	if [ -f $args_file ]; then
		args=$(cat $args_file)
	fi

	$XR0 -I $LIBX $args $f > "$tempfile" 2>&1
}

run_test() {
	f=$1
	folder=$(dirname "$f")
	tempfile=$2

	output=$(run_cmd $f $tempfile)

	# cases where we have an expected output to compare with
	if [[ "$f" == *"${fail_prefix}"* || "$folder" == *"$topological_folder"* ]]
	then
		expected_file="${f}.${expected_suffix}"
		
		echo "$(<$tempfile)" | diff - $expected_file
	else
		# silence is golden
		cat $tempfile
	fi
}

nignore=$(cat $IGNORE_FILE | wc -l)
ignore_files=$(cat $IGNORE_FILE)

for f in $ignore_files; do
	file=$TESTDIR/0v/$f
	if [ ! -f "$file" ]; then
		printf "error: ignored file %s not found\n" "$file" 1>&2
		exit 1
	fi
done

should_ignore() {
    for name in $ignore_files; do
        if [ "$name" = "$1" ]; then
            return 0
        fi
    done
    return 1
}

cd $TESTDIR/0v

ntests=$(ls */*.x | wc -l)

length=$(ls */*.x | awk '{ print length, $0 }' | sort -n -s | cut -d' ' -f2- |
	tail -1 | wc -c)

# loop through and run tests
for f in */*.x
do
	printf "%-${length}s ..." "$f"

	# skip ignores
	if should_ignore $f; then
		printf "$ignore"
		continue
	fi

	tempfile=$(mktemp)
	succ=$(run_test $f $tempfile)
	if [[ $succ -eq 0 ]]; then
		npass=$((npass+1))
		printf "$pass"
	else
		printf "$fail"
	fi
	rm $tempfile

done

cd $TESTDIR
cd ..
printf "%-${length}s ..." "0db/00-basic"
if $TESTDIR/0db/run; then
	npass=$((npass+1))
	printf "$pass"
else
	printf "$fail"
fi
ntests=$((ntests+1))

nfail=$((ntests-(npass+nignore)))
finish=$(date +"%s.%N")
time=$(echo "$finish-$start" | bc)
printf "\n%d tests:\t%d passed\t%d failed\t%d ignored\tin %.3f seconds\n" \
	$ntests $npass $nfail $nignore $time
if [ $nfail -ne 0 ]
then
	exit 1
fi
