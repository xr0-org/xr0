#!/bin/bash

# This script generates src.mk, which is included in the Makefile.
#
# src.mk imposes the following module rules:
#
#	1. Every directory in `/src` and its descendant directories, including
#	`/src` itself, defines a module.
#
#	2. Every C file within a module can include headers from the
#	`[root]/include` directory (if it exists) where `[root]` is the module
#	root directory. E.g., `/src/main.c` and `/src/ast/expr.c` can both
#	include headers from `/src/include`, but `/src/ast/expr.c` can also
#	include from `/src/ast/include`.
#
#	3. Every C file is treated as its own translation unit.
#
#	4. Every `.c` and `.h` file in the directory is a Makefile-dependency of
#	every other such file.
#
# This script also generates Synastic config files for Vim that reflect these
# rules.
TMPL_MKFILE=scripts/tmpl.mk
DEPS_MKFILE=scripts/deps.mk
SRC_MKFILE=scripts/src.mk

set +x

SRCDIR=src
BUILDDIR=build

# listincludes: output a list of the appropriate include directories from the
# given path, in keeping with rule (2.) above
function listincludes() {
	path=$1
	includedir=$path/include
	if [ -d $includedir ]; then
		echo $includedir
	fi
	parent=$(dirname $path)
	if [[ $parent != "." ]]; then
		listincludes $parent
	fi
}

INCLUDEDIRS=$(find $SRCDIR -type d -name "include")
SRCDIRS=$(find $SRCDIR -type d ! -name "include")

# hack in Lex/Yacc files
PARSER_FILES="$SRCDIR/ast/lex.yy.c \
	$SRCDIR/ast/gram.tab.c \
	$SRCDIR/include/gram.tab.h"
touch $PARSER_FILES

exec > $DEPS_MKFILE

printf "# Generated by $(pwd)/$(basename $0) at $(date "+%s")\n\n"

# headers
printf "HEADERS ="
for dir in $INCLUDEDIRS; do
	for f in $(find $dir -maxdepth 1 -type f -name "*.h"); do
		printf " \\"			# escape previous line
		printf "\n\t$f"
	done
done
printf "\n\n"

# sources
printf "SOURCES ="
for dir in $SRCDIRS; do
	for f in $(find $dir -maxdepth 1 -type f -name "*.c"); do
		printf " \\"			# escape previous line
		printf "\n\t$f"
	done
done
printf "\n\n"

# objects
printf "OBJECTS ="
for dir in $SRCDIRS; do
	build_dir=$(echo $dir | sed "s/^$SRCDIR/$BUILDDIR/")
	for f in $(find $dir -maxdepth 1 -type f -name "*.c"); do
		obj=$build_dir/$(basename $f | sed "s/.c$/.o/;")
		printf " \\"			# escape previous line
		printf "\n\t$obj"
	done
done
printf "\n"

exec > $SRC_MKFILE

printf "# Generated by $(pwd)/$(basename $0) at $(date "+%s")\n\n"

# object build commands
for dir in $SRCDIRS; do
	build_dir=$(echo $dir | sed "s/^$SRCDIR/$BUILDDIR/")
	printf "\n# $dir with build dir /$build_dir\n"
	includes=$(listincludes $dir)
	for f in $(find $dir -maxdepth 1 -type f -name "*.c"); do
		obj=$build_dir/$(basename $f | sed "s/.c$/.o/;")
		printf "$obj: $build_dir parser\n"
		printf "\t@printf \"CC\\\\t\$@\\\\n\"\n"
		printf "\t@\$(CC) \$(CFLAGS) -o \$@ -c $f "
		for inc in $includes; do
			printf -- '\\\n\t\t-I %s ' $inc
		done
		printf "\n"
	done
done

# build dirs
printf "# build dirs\n"
for dir in $SRCDIRS; do
	build_dir=$(echo $dir | sed "s/^$SRCDIR/$BUILDDIR/")
	printf "$build_dir:\n"
	printf "\t@mkdir -p \$@\n"
done

exec > /dev/tty

# hack in parser files
rm $PARSER_FILES

cp $TMPL_MKFILE Makefile
