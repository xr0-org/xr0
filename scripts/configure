#!/bin/bash

# This script generates src.mk, which is included in the Makefile.
#
# src.mk imposes the following module rules:
#
#	1. Every directory in `/src` and its descendant directories, including
#	`/src` itself, defines a module.
#
#	2. Every C file within a module can include headers from the
#	`[root]/include` directory (if it exists) where `[root]` is the module
#	root directory. E.g., `/src/main.c` and `/src/ast/expr.c` can both
#	include headers from `/src/include`, but `/src/ast/expr.c` can also
#	include from `/src/ast/include`.
#
#	3. Every C file is treated as its own translation unit.
#
#	4. Every `.c` and `.h` file in the directory is a Makefile-dependency of
#	every other such file.
#
# This script also generates Synastic config files for Vim that reflect these
# rules.

set +x

function listincludes() {
	path=$1
	echo $path/includes
	parent=$(dirname $path)
	if [[ $parent != "." ]]; then
		listincludes $parent
	fi
}

SRCDIR=src
BUILDDIR=build

# TODO: make build directories

printf "# Generated by $(pwd)/$(basename $0) at $(date "+%s")\n\n"

for dir in $(find $SRCDIR -type d ! -name "include"); do
	build_dir=$BUILDDIR/$(echo $dir | sed "s/^$SRCDIR\///")

	printf "# begin $dir\n\n"
	includes=$(listincludes $dir)
	for f in $(find $dir -maxdepth 1 -type f -name "*.c"); do
		obj=$build_dir/$(basename $f | sed "s/.c$/.o/;")
		printf "$obj: $build_dir \$(OBJECTS)\n"
		printf "\t\$(CC) \$(CFLAGS) -o \$@ -c $f "
		for inc in $includes; do
			printf -- '\\\n\t\t-I %s ' $inc
		done
		printf "\n"
	done
	printf "\n# end $dir\n\n"
done
